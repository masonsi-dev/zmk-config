/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        layer3 {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <33 32>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <22 21>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <23 22>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <35 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC         &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp GRAVE       &kp A  &kp S  &kp D     &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp LCTRL
                              &kp LGUI  &mo 1  &kp ENTER    &kp SPACE  &mo 2  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB       &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3    &kp NUMBER_4      &kp NUMBER_5            &kp NUMBER_6           &kp NUMBER_7       &kp NUMBER_8     &kp N9            &kp N0    &kp BSPC
&kp CAPSLOCK  &kp MINUS     &kp LESS_THAN  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp GREATER_THAN  &kp BSLH  &kp GRAVE
&kp LCTRL     &kp LALT      &kp LEFT_GUI   &kp COLON       &kp PIPE          &kp NON_US_BACKSLASH    &kp MINUS              &kp UNDERSCORE     &kp PLUS         &kp QUESTION      &kp PIPE  &kp TILDE
                                           &kp LGUI        &trans            &kp SPACE               &kp RET                &trans             &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR                &kp PERCENT                  &kp CARET  &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS     &kp BSPC
&kp LSHFT  &kp F2           &kp LC(G)    &kp LA(UP_ARROW)  &kp LG(LEFT_BRACKET)      &kp LG(RIGHT_BRACKET)        &trans     &kp UP_ARROW   &kp LG(NUMBER_1)  &kp LG(N9)            &kp LG(NON_US_BACKSLASH)  &trans
&kp LCTRL  &kp LEFT_ALT     &kp LGUI     &rgb_ug RGB_HUI   &kp LG(LS(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))    &kp LEFT   &kp DOWN       &kp RIGHT         &kp LG(LS(LA(N)))     &kp LA(LS(LG(M)))         &trans
                                         &kp LGUI          &trans                    &kp SPACE                    &kp RET    &trans         &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&none         &none         &none         &none       &none  &none    &kp C_PREVIOUS     &kp C_NEXT       &kp C_PLAY_PAUSE  &kp C_PP  &none  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none       &none  &none    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE        &none     &none  &none
&none         &none         &none         &bt BT_CLR  &none  &none    &none              &none            &none             &none     &none  &none
                                          &none       &none  &none    &none              &none            &none
            >;
        };
    };
};
